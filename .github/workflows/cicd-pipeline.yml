name: CI/CD Deployment Pipeline

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type (patch, minor, major)'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  ##################################################
  # 1. BUILD JOB: 檢查, 版本化, 建置與打包         #
  ##################################################
  build:
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.version.outputs.new_version }}
    steps:
      - name: 1. Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          # ✨ 修正点 1：使用权限更强的 PAT 进行 checkout ✨
          token: ${{ secrets.ACTION_TOKEN }}

      - name: 2. Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: 2.5. Bump version and create tag
        id: version
        env:
          GH_TOKEN: ${{ secrets.ACTION_TOKEN }}
        run: |
          echo "--- STARTING VERSION BUMP PROCESS ---"

          echo "Configuring git user..."
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          
          echo "Current directory content:"
          ls -la

          echo "Content of package.json BEFORE bump:"
          cat package.json

          echo "Attempting to run npm version with --verbose flag..."
          # ✨ 关键修改 1: 加入 --verbose，让 npm 输出详细的执行过程 ✨
          npm version ${{ github.event.inputs.version_type }} -m "chore: release v%s" --verbose
          
          echo "npm version command finished. Checking git status..."
          git status
          git log -1

          echo "Content of package.json AFTER bump:"
          cat package.json

          echo "Attempting to push changes and tags..."
          # ✨ 关键修改 2: 在 git push 前加入 set -x 开启调试模式 ✨
          set -x
          git push "https://${GH_TOKEN}@github.com/${{ github.repository }}" --follow-tags
          set +x
          echo "Git push command finished."
          
          echo "Extracting new version..."
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "Extracted version is: '${NEW_VERSION}'"

          echo "Setting output..."
          echo "new_version=${NEW_VERSION}" >> $GITHUB_OUTPUT

          echo "--- FINISHED VERSION BUMP PROCESS ---"

      - name: 3. Install Dependencies
        run: npm install

      - name: 3.5. Run Linter for Code Quality Check
        run: npm run lint

      - name: 4. Run Build Script
        run: npm run build

      - name: 5. Archive Production Artifact into a Zip
        run: |
          mkdir -p release_package
          cp -r dist release_package/
          cp action.yml release_package/
          cp package.json release_package/
          cp README.md release_package/
          cd release_package
          zip -r ../release.zip .

      - name: 6. Upload Zipped Artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact
          path: release.zip

  ##################################################
  # 2. DEPLOY TO STAGING JOB                       #
  ##################################################
  deploy-staging:
    needs: build
    if: ${{ needs.build.outputs.new_version != '' }}
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - name: 0. Debug received version
        run: |
          echo "Received new_version from build job: '${{ needs.build.outputs.new_version }}'"
          echo "Constructed TAG will be: 'staging-v${{ needs.build.outputs.new_version }}'"
          
      - name: 1. Download Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifact

      - name: 2. Create Staging Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG: staging-v${{ needs.build.outputs.new_version }}
          NOTE: ${{ vars.RELEASE_NOTE }}
        run: |
          gh release create "$TAG" release.zip --title "Staging Release: $TAG" --notes "$NOTE" --repo ${{ github.repository }}

  ##################################################
  # 3. DEPLOY TO PRODUCTION JOB                    #
  ##################################################
  deploy-production:
    needs: deploy-staging
    if: ${{ needs.build.outputs.new_version != '' }}
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: 0. Debug received version
        run: |
          echo "Received new_version from build job: '${{ needs.build.outputs.new_version }}'"
          echo "Constructed TAG will be: 'v${{ needs.build.outputs.new_version }}'"
          
      - name: 1. Download Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifact

      - name: 2. Create Production Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG: v${{ needs.build.outputs.new_version }}
          NOTE: ${{ vars.RELEASE_NOTE }}
        run: |
          gh release create "$TAG" release.zip --title "Production Release: $TAG" --notes "$NOTE" --repo ${{ github.repository }}

  ##################################################
  # 4. NOTIFICATION JOBS                           #
  ##################################################
  notify-success:
    needs: deploy-production
    if: success()
    runs-on: ubuntu-latest
    steps:
      - name: Send Success Notification to Slack
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            { "text": "✅ Deployment Successful! Repository: `${{ github.repository }}`, Version: `v${{ needs.build.outputs.new_version }}`", "blocks": [ { "type": "header", "text": { "type": "plain_text", "text": "✅ Deployment Successful!" } }, { "type": "section", "fields": [ { "type": "mrkdwn", "text": "*Repository:*\n<https://github.com/${{ github.repository }}|${{ github.repository }}>" }, { "type": "mrkdwn", "text": "*Version:*\n`v${{ needs.build.outputs.new_version }}`" } ] }, { "type": "actions", "elements": [ { "type": "button", "text": { "type": "plain_text", "text": "View Release" }, "url": "https://github.com/${{ github.repository }}/releases/tag/v${{ needs.build.outputs.new_version }}" } ] } ] }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  notify-failure:
    needs: [build, deploy-staging, deploy-production]
    if: failure()
    runs-on: ubuntu-latest
    steps:
      - name: 1. Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 2. Send Failure Notification to Slack
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            { "text": "❌ Deployment Failed! Repository: `${{ github.repository }}`", "blocks": [ { "type": "header", "text": { "type": "plain_text", "text": "❌ Deployment Failed!" } }, { "type": "section", "fields": [ { "type": "mrkdwn", "text": "*Repository:*\n<https://github.com/${{ github.repository }}|${{ github.repository }}>" }, { "type": "mrkdwn", "text": "*Workflow Run:*\n<https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|Click to view logs>" } ] } ] }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: 3. Rollback - Delete Failed Releases and Tag
        if: ${{ needs.build.outputs.new_version != '' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

        run: |
          echo "Attempting to rollback failed release v${{ needs.build.outputs.new_version }}..."
          gh release delete v${{ needs.build.outputs.new_version }} --yes --repo ${{ github.repository }} || echo "Production release not created or already deleted."
          gh release delete staging-v${{ needs.build.outputs.new_version }} --yes --repo ${{ github.repository }} || echo "Staging release not created or already deleted."
          git push --delete origin v${{ needs.build.outputs.new_version }} || echo "Remote tag not found or already deleted."
