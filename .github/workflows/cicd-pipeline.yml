# 這個 workflow 的名稱，會顯示在 GitHub Actions 的 UI 介面上。
name: CI/CD Deployment Pipeline

# --- 觸發器設定 ---
on:
  workflow_dispatch:
    inputs:
      version_type:
        description: '版本升級類型 (patch, minor, major)'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

# --- 工作 (Jobs) 定義 ---
jobs:
  ##################################################
  # 1. BUILD JOB: 檢查, 版本化, 建置與打包         #
  ##################################################
  build:
    name: Build & Package
    runs-on: ubuntu-latest
    steps:
      - name: 1. Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.ACTION_TOKEN }}

      - name: 2. Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: 2.5. Bump version
        id: version
        env:
          GH_TOKEN: ${{ secrets.ACTION_TOKEN }}
        run: |
          set -e
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          npm version ${{ github.event.inputs.version_type }} -m "chore: release v%s" --force
          git push "https://x-access-token:${GH_TOKEN}@github.com/${{ github.repository }}" --follow-tags

      - name: 3. Install Dependencies
        run: npm install

      - name: 3.5. Run Linter for Code Quality Check
        run: npm run lint

      - name: 4. Run Build Script
        run: npm run build

      - name: 5. Archive Source, Artifacts, and Version
        run: |
          node -p "require('./package.json').version" > version.txt
          mkdir -p release_package
          cp -r dist release_package/
          cp -r src release_package/
          cp -r test release_package/
          cp action.yml release_package/
          cp package.json release_package/
          cp README.md release_package/
          cp .eslintrc.json release_package/
          cp version.txt release_package/
          zip -r artifact_bundle.zip ./release_package

      - name: 6. Upload Artifact Bundle
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact
          path: artifact_bundle.zip

  ##################################################
  # 2A. TEST-UNIT JOB: 單元測試                     #
  ##################################################
  test-unit:
    name: Run Unit Tests
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: 1. Download Artifact Bundle
        uses: actions/download-artifact@v4
        with:
          name: build-artifact

      - name: 2. Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: 3. Unzip Artifact Bundle
        run: unzip artifact_bundle.zip

      - name: 4. Install Dependencies
        working-directory: ./release_package
        run: npm install --production

      - name: 5. Run Unit Tests & Generate Report
        working-directory: ./release_package
        run: |
          npm test > test-report.txt 2>&1 || true

      - name: 6. Upload Test Report
        uses: actions/upload-artifact@v4
        with:
          name: test-report
          path: ./release_package/test-report.txt

      - name: 7. Check Test Results and Fail Job if Needed
        working-directory: ./release_package
        run: |
          if grep -i -q "error" test-report.txt || grep -i -q "failed" test-report.txt; then
            echo "❌ Unit tests failed. See the 'test-report' artifact for details."
            cat test-report.txt
            exit 1
          else
            echo "✅ Unit tests passed."
          fi

  ##################################################
  # 2B. TEST-INTEGRATION JOB: 整合測試 (模擬)     #
  ##################################################
  test-integration:
    name: Run Integration Tests (Mock)
    needs: test-unit
    runs-on: ubuntu-latest
    steps:
      - name: 1. Run Mock Integration Test
        run: |
          echo "✅ Mock integration tests passed!"
          exit 0
        
  ##################################################
  # 3. DEPLOY TO STAGING JOB                       #
  ##################################################
  deploy-staging:
    name: Deploy to Staging
    needs: test-integration
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - name: 1. Download Artifact Bundle
        uses: actions/download-artifact@v4
        with:
          name: build-artifact
      - name: 2. Unzip for release
        run: unzip artifact_bundle.zip
      - name: 3. Create Staging Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NOTE: ${{ vars.RELEASE_NOTE }}
        run: |
          VERSION=$(cat release_package/version.txt)
          TAG="staging-v$VERSION"
          cd release_package/dist
          zip -r ../../release_for_upload.zip .
          cd ../..
          gh release create "$TAG" release_for_upload.zip --title "Staging Release: $TAG" --notes "$NOTE" --repo ${{ github.repository }}

  ##################################################
  # 4. DEPLOY TO PRODUCTION JOB                    #
  ##################################################
  deploy-production:
    name: Deploy to Production
    needs: deploy-staging
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: 1. Download Artifact Bundle
        uses: actions/download-artifact@v4
        with:
          name: build-artifact
      - name: 2. Unzip for release
        run: unzip artifact_bundle.zip
      - name: 3. Create Production Release
        id: create_release # Added ID for output
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NOTE: ${{ vars.RELEASE_NOTE }}
        run: |
          VERSION=$(cat release_package/version.txt)
          TAG="v$VERSION"
          cd release_package/dist
          zip -r ../../release_for_upload.zip .
          cd ../..
          gh release create "$TAG" release_for_upload.zip --title "Production Release: $TAG" --notes "$NOTE" --repo ${{ github.repository }}
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

  ##################################################
  # 5. O 級任務：通知與自動化問題追蹤               #
  ##################################################
  notify-success:
    name: Send Success Notification
    needs: [deploy-production]
    if: success()
    runs-on: ubuntu-latest
    steps:
      - name: Send Success Notification to Slack
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: ${{ toJson({ "text": "✅ Deployment Successful! Repository: `${{ github.repository }}`, Version: `v${{ needs.deploy-production.outputs.version }}`" }) }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  notify-failure:
    name: Send Failure Notification & Rollback
    needs: [build, test-unit, test-integration, deploy-staging, deploy-production]
    if: failure()
    runs-on: ubuntu-latest
    steps:
      - name: 1. Download All Artifacts (to get version and reports)
        uses: actions/download-artifact@v4
        continue-on-error: true

      - name: 2. Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.ACTION_TOKEN }}

      - name: 3. Send Failure Notification to Slack
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: ${{ toJson({ "text": "❌ Deployment Failed! Repository: `${{ github.repository }}`. [View Run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})" }) }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: 4. Rollback - Delete Failed Releases and Tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [ -f build-artifact/version.txt ]; then
            VERSION=$(cat build-artifact/version.txt)
            echo "Attempting to rollback failed release v$VERSION..."
            gh release delete v$VERSION --yes --repo ${{ github.repository }} || true
            gh release delete staging-v$VERSION --yes --repo ${{ github.repository }} || true
            git push --delete origin v$VERSION || true
          else
            echo "version.txt not found, skipping rollback."
          fi

      - name: 5. Create GitHub Issue on Failure
        env:
          GITHUB_TOKEN: ${{ secrets.ACTION_TOKEN }}
        run: |
          LINT_REPORT_CONTENT=$(cat test-report/test-report.txt || echo "Test report not available.")
          gh issue create \
            --title "CI/CD Pipeline Failure: Run #${{ github.run_number }}" \
            --body "The CI/CD pipeline failed. Please investigate. [View Run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})\n\n**Test Report:**\n\`\`\`\n${LINT_REPORT_CONTENT}\n\`\`\`" \
            --repo ${{ github.repository }}
