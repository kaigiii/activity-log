name: CI/CD Deployment Pipeline

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type (patch, minor, major)'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: 1. Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.ACTION_TOKEN }}

      - name: 2. Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: 2.5. Bump version
        id: version
        env:
          GH_TOKEN: ${{ secrets.ACTION_TOKEN }}
        run: |
          set -e
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          npm version ${{ github.event.inputs.version_type }} -m "chore: release v%s" --force
          git push "https://x-access-token:${GH_TOKEN}@github.com/${{ github.repository }}" --follow-tags

      - name: 3. Install Dependencies
        run: npm install

      - name: 3.5. Run Linter for Code Quality Check
        run: npm run lint

      - name: 4. Run Build Script
        run: npm run build

      - name: 5. Archive Production Artifact and Version
        run: |
          node -p "require('./package.json').version" > version.txt
          echo "Version number saved to version.txt:"
          cat version.txt
          mkdir -p release_package
          cp -r dist release_package/
          cp action.yml release_package/
          cp package.json release_package/
          cp README.md release_package/
          cp -r src release_package/
          cp .eslintrc.json release_package/
          cd release_package
          zip -r ../release.zip .

      - name: 6. Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact
          path: |
            release.zip
            version.txt

##################################################
  # 2A. TEST-UNIT JOB: 單元測試 (Linting)          #
  ##################################################
  test-unit:
    name: Run Unit Tests (Linting)
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: 1. Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifact

      - name: 2. Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: 3. Unzip Artifact
        run: unzip release.zip -d ./app

      # ✨ 關鍵修正點 1：直接在 app 目錄中執行 npm install ✨
      - name: 4. Install Dependencies for Testing
        working-directory: ./app
        run: npm install # npm install 會自動讀取該目錄下的 package.json

      # ✨ 關鍵修正點 2：在 app 目錄中執行 npm test ✨
      - name: 5. Run Mock Tests (Lint)
        working-directory: ./app
        run: npm test # npm test 會執行 lint

      - name: 6. Generate and Upload Lint Report
        working-directory: ./app
        run: |
          # 即使 lint 失敗也要繼續，以便上傳報告
          npm run lint > lint-report.txt || true
          
      - name: 7. Upload Lint Report
        uses: actions/upload-artifact@v4
        with:
          name: lint-report
          path: ./app/lint-report.txt

      - name: 8. Check Lint Results and Fail Job if Needed
        working-directory: ./app
        run: |
          # 檢查報告檔案是否為空。如果不為空，說明有 lint 錯誤。
          if [ -s lint-report.txt ]; then
            echo "❌ Linting failed. See the 'lint-report' artifact for details."
            cat lint-report.txt
            exit 1
          else
            echo "✅ Linting passed."
          fi

  ##################################################
  # 2B. TEST-INTEGRATION JOB: 整合測試 (模擬)     #
  ##################################################
  test-integration:
    name: Run Integration Tests (Mock)
    needs: test-unit
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - name: 1. Run Mock Integration Test
        env:
          TEST_ENV: ${{ vars.TEST_ENV || 'staging' }}
        run: |
          echo "Running integration tests on environment: $TEST_ENV..."
          # 這裡可以是一個真實的測試腳本，我們先用 echo 模擬
          echo "✅ Mock integration tests passed!"
          exit 0
        

  release:
    needs: test-unit
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - name: 1. Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifact

      - name: 2. Create Staging Release
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NOTE: ${{ vars.RELEASE_NOTE }}
        run: |
          VERSION=$(cat version.txt)
          TAG="dev-v$VERSION"
          echo "Creating release with tag: $TAG"
          gh release create "$TAG" release.zip --title "Staging Release: $TAG" --notes "$NOTE" --repo ${{ github.repository }}
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

  # deploy-production:
  #   needs: deploy-staging
  #   runs-on: ubuntu-latest
  #   environment: production
  #   steps:
  #     - name: 1. Download Artifact
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: build-artifact

  #     - name: 2. Create Production Release
  #       id: create_release
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #         NOTE: ${{ vars.RELEASE_NOTE }}
  #       run: |
  #         VERSION=$(cat version.txt)
  #         TAG="v$VERSION"
  #         echo "Creating release with tag: $TAG"
  #         gh release create "$TAG" release.zip --title "Production Release: $TAG" --notes "$NOTE" --repo ${{ github.repository }}
  #         echo "version=${VERSION}" >> $GITHUB_OUTPUT

  # notify-success:
  #   needs: [deploy-production]
  #   if: success()
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Send Success Notification to Slack
  #       uses: slackapi/slack-github-action@v1.24.0
  #       with:
  #         payload: |
  #           { "text": "✅ Deployment Successful! Repository: `${{ github.repository }}`, Version: `v${{ needs.deploy-production.outputs.version }}`", "blocks": [ { "type": "header", "text": { "type": "plain_text", "text": "✅ Deployment Successful!" } }, { "type": "section", "fields": [ { "type": "mrkdwn", "text": "*Repository:*\n<https://github.com/${{ github.repository }}|${{ github.repository }}>" }, { "type": "mrkdwn", "text": "*Version:*\n`v${{ needs.deploy-production.outputs.version }}`" } ] }, { "type": "actions", "elements": [ { "type": "button", "text": { "type": "plain_text", "text": "View Release" }, "url": "https://github.com/${{ github.repository }}/releases/tag/v${{ needs.deploy-production.outputs.version }}" } ] } ] }
  #       env:
  #         SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # notify-failure:
  #   needs: [build, deploy-staging, deploy-production]
  #   if: failure()
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: 1. Download Artifact (to get version)
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: build-artifact
  #       continue-on-error: true

  #     - name: 2. Checkout Repository
  #       uses: actions/checkout@v4
  #       with:
  #         token: ${{ secrets.ACTION_TOKEN }}

  #     - name: 3. Send Failure Notification to Slack
  #       uses: slackapi/slack-github-action@v1.24.0
  #       with:
  #         payload: |
  #           { "text": "❌ Deployment Failed! Repository: `${{ github.repository }}`", "blocks": [ { "type": "header", "text": { "type": "plain_text", "text": "❌ Deployment Failed!" } }, { "type": "section", "fields": [ { "type": "mrkdwn", "text": "*Repository:*\n<https://github.com/${{ github.repository }}|${{ github.repository }}>" }, { "type": "mrkdwn", "text": "*Workflow Run:*\n<https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|Click to view logs>" } ] } ] }
  #       env:
  #         SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  #     - name: 4. Rollback - Delete Failed Releases and Tag
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       run: |
  #         if [ -f version.txt ]; then
  #           VERSION=$(cat version.txt)
  #           echo "Attempting to rollback failed release v$VERSION..."
  #           gh release delete v$VERSION --yes --repo ${{ github.repository }} || echo "Production release not created or already deleted."
  #           gh release delete staging-v$VERSION --yes --repo ${{ github.repository }} || echo "Staging release not created or already deleted."
  #           git push --delete origin v$VERSION || echo "Remote tag not found or already deleted."
  #         else
  #           echo "version.txt not found, skipping rollback."
  #         fi
